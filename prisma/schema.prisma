// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int         @default(autoincrement()) @id 
  email     String      @unique
  nickname  String
  password  String
  state    State?
  
  payment        Payment[]
  subscriptions  Subscription[]
  paymentMethods PaymentMethod[]
}

model FriendList {
  userId Int 
  friendId Int
  @@unique([userId, friendId])
  @@id([userId, friendId])
}

model State {
  id  Int @default(autoincrement()) @id
  name String
  user    User  @relation(fields: [userId], references: [id])
  userId  Int   @unique
}

model SendFriend {
  sendUserId Int 
  receiveUserId Int
  @@unique([sendUserId, receiveUserId]) 
  @@id([sendUserId, receiveUserId])
}

// 결제

enum PlanType {
  MONTHLY
  YEARLY
}

enum PaymentCycle {
  REGULAR
  IRREGULAR
}

enum PaymentStatus {
  INITIATED
  COMPLETED
  FAILED
}

enum RefundStatus {
  PENDING
  APPROVED
  DENIED
}

model TempOrder {
  tempOrderId  String   @id @default(uuid()) @db.VarChar(25)
  orderName    String   @db.VarChar(50)
  totalAmount  Int
}

model Plan {
  id          Int      @id @default(autoincrement())
  type        PlanType
  price       Int
  duration    Int      @default(12)

  subscriptions Subscription[]
  payments Payment[]
}

model Payment {
  id              Int          @id @default(autoincrement())
  userId          Int
  planId          Int
  subscriptionId  Int
  amount          Int
  status          PaymentStatus
  createdAt       DateTime     @default(now())
  paymentMethodId Int

  user            User         @relation(fields: [userId], references: [id])
  plan            Plan         @relation(fields: [planId], references: [id])
  subscription    Subscription @relation(fields: [subscriptionId], references: [id])
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  refunds         Refund[]
}

model Subscription {
  id          Int      @id @default(autoincrement())
  userId      Int
  planId      Int
  startDate   DateTime @default(now())
  endDate     DateTime
  isActive    Boolean  @default(false)
  paymentCycle PaymentCycle

  user    User    @relation(fields: [userId], references: [id])
  plan    Plan    @relation(fields: [planId], references: [id])
  payments Payment[]
}

model PaymentMethod {
  id          Int      @id @default(autoincrement())
  userId      Int
  type       String
  billingKey String? @db.VarChar(20)

  user        User     @relation(fields: [userId], references: [id])
  payments Payment[]
}

model Refund {
  id          Int      @id @default(autoincrement())
  paymentId   Int
  amount      Int
  status      RefundStatus
  createdAt   DateTime @default(now())

  payment    Payment   @relation(fields: [paymentId], references: [id])
}
